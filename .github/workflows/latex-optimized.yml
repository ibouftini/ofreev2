name: 'LaTeX Compiler (Optimized)'

on:
  push:
    paths: ['**.tex', '**.bib', '**.cls', '**.sty', '.github/workflows/**', '.github/actions/**']
  workflow_dispatch:
    inputs:
      force-all:
        description: 'Force compilation of all documents'
        required: false
        default: false
        type: boolean

env:
  TEXLIVE_YEAR: '2025'
  CACHE_VERSION: 'v6'

permissions:
  contents: write
  actions: read

jobs:
  detect:
    name: 'Detect Changes'
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.detect.outputs.has-changes }}
      matrix: ${{ steps.detect.outputs.matrix }}
      summary: ${{ steps.detect.outputs.summary }}
      required-compilers: ${{ steps.compilers.outputs.required-compilers }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes and generate matrix
        id: detect
        uses: ./.github/actions/detect-changes
        with:
          base-ref: 'HEAD^'
          force-all: ${{ github.event.inputs.force-all || 'false' }}

      - name: Extract required compilers
        id: compilers
        if: steps.detect.outputs.has-changes == 'true'
        run: |
          MATRIX='${{ steps.detect.outputs.matrix }}'
          COMPILERS=$(echo "$MATRIX" | jq -r '.[].compiler' | sort -u | tr '\n' ',' | sed 's/,$//')
          echo "Required compilers: $COMPILERS"
          echo "required-compilers=$COMPILERS" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "## Change Detection Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.detect.outputs.has-changes == 'true' && 'Changes detected' || 'No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Summary:** ${{ steps.detect.outputs.summary }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.detect.outputs.has-changes }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Documents to compile:" >> $GITHUB_STEP_SUMMARY
            echo '${{ steps.detect.outputs.matrix }}' | jq -r '.[] | "- `\(.file)` (\(.compiler), \(.complexity))"' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Required compilers:** ${{ steps.compilers.outputs.required-compilers }}" >> $GITHUB_STEP_SUMMARY
          fi

  setup:
    name: 'Setup TeX Live'
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.has-changes == 'true'
    outputs:
      bin-dir: ${{ steps.setup.outputs.bin-dir }}
      cache-hit: ${{ steps.setup.outputs.cache-hit }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup TeX Live
        id: setup
        uses: ./.github/actions/setup-texlive
        with:
          texlive-year: ${{ env.TEXLIVE_YEAR }}
          compilers: ${{ needs.detect.outputs.required-compilers }}
          cache-version: ${{ env.CACHE_VERSION }}

      - name: Setup summary
        run: |
          echo "## TeX Live Setup" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**TeX Live Year:** ${{ env.TEXLIVE_YEAR }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cache Hit:** ${{ steps.setup.outputs.cache-hit }}" >> $GITHUB_STEP_SUMMARY
          echo "**Binary Directory:** ${{ steps.setup.outputs.bin-dir }}" >> $GITHUB_STEP_SUMMARY
          echo "**Required Compilers:** ${{ needs.detect.outputs.required-compilers }}" >> $GITHUB_STEP_SUMMARY

  compile:
    name: 'Compile: ${{ matrix.file }}'
    runs-on: ubuntu-latest
    needs: [detect, setup]
    if: needs.detect.outputs.has-changes == 'true'
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include: ${{ fromJSON(needs.detect.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore TeX Live cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/texlive/${{ env.TEXLIVE_YEAR }}
            ~/.fonts
          key: texlive-base-${{ env.TEXLIVE_YEAR }}-${{ env.CACHE_VERSION }}-${{ runner.os }}
          restore-keys: |
            texlive-base-${{ env.TEXLIVE_YEAR }}-${{ env.CACHE_VERSION }}-${{ runner.os }}

      - name: Setup TeX Live environment from cache
        run: |
          echo "=== Setting up TeX Live in compile job ==="
          
          # Download TeX Live installer if cache miss or incomplete
          if [ ! -f ~/texlive/${{ env.TEXLIVE_YEAR }}/texmf-dist/web2c/texmf.cnf ]; then
            echo "Cache miss or incomplete - installing minimal TeX Live..."
            
            # Download installer
            wget -nv https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
            tar -xf install-tl-unx.tar.gz
            cd install-tl-*
            
            # Create minimal profile
            cat > texlive.profile << EOF
          selected_scheme scheme-basic
          TEXDIR ~/texlive/${{ env.TEXLIVE_YEAR }}
          TEXMFCONFIG ~/.texlive${{ env.TEXLIVE_YEAR }}/texmf-config
          TEXMFHOME ~/texmf
          TEXMFLOCAL ~/texlive/${{ env.TEXLIVE_YEAR }}/texmf-local
          TEXMFSYSCONFIG ~/texlive/${{ env.TEXLIVE_YEAR }}/texmf-config
          TEXMFSYSVAR ~/texlive/${{ env.TEXLIVE_YEAR }}/texmf-var
          TEXMFVAR ~/.texlive${{ env.TEXLIVE_YEAR }}/texmf-var
          binary_x86_64-linux 1
          collection-basic 1
          collection-latex 1
          collection-latexextra 1
          instopt_adjustpath 0
          instopt_adjustrepo 1
          instopt_letter 0
          instopt_portable 0
          instopt_write18_restricted 1
          tlpdbopt_autobackup 1
          tlpdbopt_backupdir tlpkg/backups
          tlpdbopt_create_formats 1
          tlpdbopt_desktop_integration 1
          tlpdbopt_file_assocs 1
          tlpdbopt_generate_updmap 0
          tlpdbopt_install_docfiles 0
          tlpdbopt_install_srcfiles 0
          tlpdbopt_post_code 1
          tlpdbopt_sys_bin /usr/local/bin
          tlpdbopt_sys_info /usr/local/share/info
          tlpdbopt_sys_man /usr/local/share/man
          tlpdbopt_w32_multi_user 1
          EOF
            
            # Install TeX Live
            echo "Installing TeX Live (this may take a few minutes)..."
            perl install-tl --profile=texlive.profile --no-interaction
            cd ..
            rm -rf install-tl-*
          else
            echo "TeX Live cache found, using cached installation"
          fi
          
          # Setup PATH
          BIN_DIR=~/texlive/${{ env.TEXLIVE_YEAR }}/bin/x86_64-linux
          echo "Setting up PATH with: $BIN_DIR"
          export PATH="$BIN_DIR:$PATH"
          echo "$BIN_DIR" >> $GITHUB_PATH
          
          # Verify installation
          echo "Verifying TeX Live installation..."
          if which pdflatex >/dev/null 2>&1; then
            echo "[OK] pdflatex found: $(which pdflatex)"
          else
            echo "[ERROR] pdflatex not found"
            echo "Contents of bin directory:"
            ls -la "$BIN_DIR" | head -10 || echo "Bin directory not found"
            exit 1
          fi
          
          if which tlmgr >/dev/null 2>&1; then
            echo "[OK] tlmgr found: $(which tlmgr)"
            
            # Install required packages for the compilers
            echo "Installing required packages..."
            COMPILERS="${{ needs.detect.outputs.required-compilers }}"
            if echo "$COMPILERS" | grep -q "xelatex"; then
              echo "Installing XeLaTeX packages..."
              tlmgr install collection-xetex fontspec unicode-math || echo "Warning: XeLaTeX packages install failed"
            fi
            if echo "$COMPILERS" | grep -q "lualatex"; then
              echo "Installing LuaLaTeX packages..."
              tlmgr install collection-luatex || echo "Warning: LuaLaTeX packages install failed"
            fi
            
            # Install texliveonfly
            echo "Installing texliveonfly..."
            tlmgr install texliveonfly || echo "Warning: texliveonfly install failed"
          else
            echo "[ERROR] tlmgr not found"
            exit 1
          fi
          
          # Setup Python for texliveonfly fallback
          python3 -m pip install --user requests || echo "Warning: Python requests install failed"
          
          # Final verification
          echo "=== Final verification ==="
          echo "PATH: $PATH"
          which pdflatex && echo "[OK] pdflatex ready"
          which xelatex && echo "[OK] xelatex ready" || echo "[--] xelatex not available"  
          which lualatex && echo "[OK] lualatex ready" || echo "[--] lualatex not available"
          which texliveonfly && echo "[OK] texliveonfly ready" || echo "[--] texliveonfly not available (will use fallback)"
          echo "=== Setup complete ==="

      - name: Compile document
        id: compile
        uses: ./.github/actions/compile-document
        with:
          file: ${{ matrix.file }}
          compiler: ${{ matrix.compiler }}
          complexity: ${{ matrix.complexity }}
          needs-phase2: ${{ matrix.needs-phase2 }}

      - name: Upload PDF artifact
        if: steps.compile.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: pdf-${{ matrix.basename }}
          path: ${{ steps.compile.outputs.pdf-path }}
          retention-days: 30

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.basename }}
          path: |
            ${{ matrix.directory }}/*.log
            ${{ matrix.directory }}/*.aux
            ${{ matrix.directory }}/*.blg
          retention-days: 7

      - name: Compilation summary
        run: |
          echo "## Compilation: ${{ matrix.file }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.compile.outputs.success == 'true' && 'SUCCESS' || 'FAILED' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Compiler:** ${{ matrix.compiler }}" >> $GITHUB_STEP_SUMMARY
          echo "**Complexity:** ${{ matrix.complexity }}" >> $GITHUB_STEP_SUMMARY
          echo "**Compilation Time:** ${{ steps.compile.outputs.compilation-time }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.compile.outputs.success }}" = "true" ]; then
            echo "**PDF Size:** ${{ steps.compile.outputs.pdf-size }}" >> $GITHUB_STEP_SUMMARY
            echo "**PDF Path:** \`${{ steps.compile.outputs.pdf-path }}\`" >> $GITHUB_STEP_SUMMARY
          fi

  collect:
    name: 'Collect Results'
    runs-on: ubuntu-latest
    needs: [detect, setup, compile]
    if: always() && needs.detect.outputs.has-changes == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all PDF artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pdf-*
          path: compiled-pdfs
          merge-multiple: true

      - name: Organize PDFs and commit
        run: |
          echo "Organizing compiled PDFs..."
          
          # Count successful compilations
          PDF_COUNT=0
          SUCCESS_COUNT=0
          FAILED_COUNT=0
          
          MATRIX='${{ needs.detect.outputs.matrix }}'
          
          for row in $(echo "$MATRIX" | jq -r '.[] | @base64'); do
            DATA=$(echo $row | base64 --decode)
            FILE=$(echo $DATA | jq -r '.file')
            BASENAME=$(echo $DATA | jq -r '.basename')
            DIRECTORY=$(echo $DATA | jq -r '.directory')
            
            # Check if PDF was generated
            if [ -f "compiled-pdfs/${BASENAME}.pdf" ]; then
              echo "Moving compiled-pdfs/${BASENAME}.pdf to ${DIRECTORY}/${BASENAME}.pdf"
              cp "compiled-pdfs/${BASENAME}.pdf" "${DIRECTORY}/${BASENAME}.pdf"
              PDF_COUNT=$((PDF_COUNT + 1))
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            else
              echo "Warning: No PDF found for $FILE"
              FAILED_COUNT=$((FAILED_COUNT + 1))
            fi
          done
          
          echo "Compilation results:"
          echo "  Successful: $SUCCESS_COUNT"
          echo "  Failed: $FAILED_COUNT"
          echo "  Total PDFs: $PDF_COUNT"
          
          # Commit PDFs if any were generated
          if [ $PDF_COUNT -gt 0 ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "LaTeX Compiler Bot"
            
            # Pull latest changes to avoid conflicts
            git pull --rebase origin ${{ github.ref_name }} || echo "Pull failed, continuing..."
            
            # Add all PDFs
            git add **/*.pdf
            
            if ! git diff --staged --quiet; then
              COMMIT_MSG="Auto-compile LaTeX: $SUCCESS_COUNT document(s)"
              if [ $FAILED_COUNT -gt 0 ]; then
                COMMIT_MSG="$COMMIT_MSG ($FAILED_COUNT failed)"
              fi
              COMMIT_MSG="$COMMIT_MSG - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
              
              git commit -m "$COMMIT_MSG"
              
              # Push with retry logic
              MAX_RETRIES=3
              RETRY=0
              while [ $RETRY -lt $MAX_RETRIES ]; do
                if git push; then
                  echo "PDFs committed and pushed successfully"
                  break
                else
                  RETRY=$((RETRY + 1))
                  echo "Push attempt $RETRY/$MAX_RETRIES failed"
                  if [ $RETRY -lt $MAX_RETRIES ]; then
                    sleep $((RETRY * 2))
                    git pull --rebase origin ${{ github.ref_name }} || exit 1
                  else
                    echo "Failed to push after $MAX_RETRIES attempts"
                    exit 1
                  fi
                fi
              done
            else
              echo "No new PDFs to commit"
            fi
          else
            echo "No PDFs were generated successfully"
            exit 1
          fi

      - name: Final summary
        if: always()
        run: |
          MATRIX='${{ needs.detect.outputs.matrix }}'
          TOTAL_DOCS=$(echo "$MATRIX" | jq length)
          
          echo "## Final Compilation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Documents:** $TOTAL_DOCS" >> $GITHUB_STEP_SUMMARY
          echo "**Cache Hit:** ${{ needs.setup.outputs.cache-hit }}" >> $GITHUB_STEP_SUMMARY
          echo "**TeX Live Version:** ${{ env.TEXLIVE_YEAR }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Compilation Results:" >> $GITHUB_STEP_SUMMARY
          
          # Check job statuses
          if [ "${{ needs.compile.result }}" = "success" ]; then
            echo "All documents compiled successfully!" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.compile.result }}" = "failure" ]; then
            echo "Some documents failed to compile. Check individual job logs." >> $GITHUB_STEP_SUMMARY
          else
            echo "Compilation jobs completed with mixed results." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Performance Metrics:" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Processing:** Up to 4 documents simultaneously" >> $GITHUB_STEP_SUMMARY
          echo "- **Intelligent Caching:** TeX Live installation cached" >> $GITHUB_STEP_SUMMARY
          echo "- **Smart Change Detection:** Only affected documents compiled" >> $GITHUB_STEP_SUMMARY

  no-changes:
    name: 'No Changes Detected'
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.has-changes == 'false'
    
    steps:
      - name: No changes summary
        run: |
          echo "## No Compilation Needed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** No changes detected" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ needs.detect.outputs.summary }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All LaTeX documents are up to date." >> $GITHUB_STEP_SUMMARY